datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String   @id @default(cuid())
  name              String?
  email             String   @unique
  password          String?  // Nullable for Google accounts
  isAdmin           Boolean  @default(false)  // Admin status
  isPaidSubscriber  Boolean  @default(false)  // Subscription status
  passwordResetToken   String? @unique
  passwordResetTokenExp DateTime?
  image             String?  // Google profile picture
  emailVerified     DateTime? // Google email verification status
 
  accounts          Account[] // Link Google accounts to users
  reports           Report[] // One-to-Many relationship with reports
}
 
model Account {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          String   // "google", "github", etc.
  providerAccountId String   @unique // Google account ID
}

model Beach {
  id          String   @id @default(cuid()) 
  slug        String   @unique
  name        String
  location    String?
  description String?
  imageUrl    String?
  reports     Report[] // One-to-Many relationship
}

model Report {
  id          String   @id @default(cuid()) 
  beachId     String   // Foreign key
  userId      String   // Foreign key
  beach       Beach    @relation(fields: [beachId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
  reportText  String
  rating      Int      @default(3) 
  createdAt   DateTime @default(now())
}
